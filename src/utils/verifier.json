{
  "address": "0x40739E742624d8C446d98d47C5b4Eb3dD276c344",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ICallExecutor",
          "name": "callExecutor",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BitUsed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Expired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidBit",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountReceived",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughReceived",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "InvalidData",
      "type": "event"
    },
    {
      "stateMutability": "nonpayable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "ONE_HUNDRED_PERCENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "setPriceOf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "testPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bitmapIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bit",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenInAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenOutAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiryBlock",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "tokenToToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x07f18b750770d189ee6ed205c5b56e0ddc5426a800b5950ccd52e3721d25c899",
  "receipt": {
    "to": null,
    "from": "0x7A3876E516d7F221Eb4791410F7434F20f01773A",
    "contractAddress": "0x512a98Fc56fE78d88B837883b47192c0DE4D7831",
    "transactionIndex": 31,
    "gasUsed": "782168",
    "logsBloom": "0x
    "blockHash": "0x40760f2a075947a652127f5540a4bbae3e3b6adaedd2952d958bcf92313dade8",
    "transactionHash": "0x07f18b750770d189ee6ed205c5b56e0ddc5426a800b5950ccd52e3721d25c899",
    "logs": [],
    "blockNumber": 7738730,
    "cumulativeGasUsed": "7538973",
    "status": 1,
    "byzantium": true
  },
  "args": ["0xDE61dfE5fbF3F4Df70B16D0618f69B96A2754bf8"],
  "numDeployments": 6,
  "solcInputHash": "49787aef7350ec5003894010cf8e88d3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ICallExecutor\",\"name\":\"callExecutor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BitUsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Expired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"}],\"name\":\"NotEnoughReceived\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"InvalidData\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"ONE_HUNDRED_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPriceOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"testPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bitmapIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bit\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenInAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenOutAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"tokenToToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"BitUsed()\":[{\"details\":\"Revert when bit provided is used\"}],\"Expired()\":[{\"details\":\"Revert when limit swap is expired\"}],\"InvalidBit()\":[{\"details\":\"Revert when bit provided is not valid\"}],\"NotEnoughReceived(uint256)\":[{\"details\":\"Revert when swap has not received enough of the output asset to be fulfilled\"}]},\"kind\":\"dev\",\"methods\":{\"tokenToToken(uint256,uint256,address,address,uint256,uint256,uint256,address,address,bytes)\":{\"details\":\"Executes an ERC20 to ERC20 limit swap\",\"params\":{\"bit\":\"The value of the replay bit [signed]\",\"bitmapIndex\":\"The index of the replay bit's bytes32 slot [signed]\",\"data\":\"Data to execute on the `to` contract to fulfill the swap [unsigned]\",\"expiryBlock\":\"The block when the swap expires [signed]\",\"to\":\"Address of the contract that will fulfill the swap [unsigned]\",\"tokenIn\":\"The input token provided for the swap [signed]\",\"tokenInAmount\":\"Amount of tokenIn provided [signed]\",\"tokenOut\":\"The output token required to be received from the swap [signed]\",\"tokenOutAmount\":\"Amount of tokenOut required to be received [signed]\"}}},\"title\":\"Verifier for ERC20 limit swaps\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"tokenToToken(uint256,uint256,address,address,uint256,uint256,uint256,address,address,bytes)\":{\"notice\":\"This should be executed by metaDelegateCall() or metaDelegateCall_EIP1271() with the following signed and unsigned params\"}},\"notice\":\"These functions should be executed by metaPartialSignedDelegateCall() on Brink account proxy contracts\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Verifier.sol\":\"StopLimitSwapVerifier\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/Interfaces/ICallExecutor.sol\":{\"content\":\"\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\ninterface ICallExecutor {\\n  function proxyCall(address to, bytes memory data) external payable;\\n}\",\"keccak256\":\"0x5bb6a30e5b8fd252e45fcb09990d68d93520e3c739e8b1cb11ac7390a0deb938\",\"license\":\"GPL-3.0-or-later\"},\"contracts/Libraries/Bit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.10;\\npragma abicoder v1;\\n\\n/// @title Bit replay protection library\\n/// @notice Handles storage and loads for replay protection bits\\n/// @dev Solution adapted from https://github.com/PISAresearch/metamask-comp/blob/77fa8295c168ee0b6bf801cbedab797d6f8cfd5d/src/contracts/BitFlipMetaTransaction/README.md\\n/// @dev This is a gas optimized technique that stores up to 256 replay protection bits per bytes32 slot\\nlibrary Bit {\\n  /// @dev Revert when bit provided is not valid\\n  error InvalidBit();\\n\\n  /// @dev Revert when bit provided is used\\n  error BitUsed();\\n\\n  /// @dev Initial pointer for bitmap storage ptr computation\\n  /// @notice This is the uint256 representation of keccak(\\\"bmp\\\")\\n  uint256 constant INITIAL_BMP_PTR = \\n  48874093989078844336340380824760280705349075126087700760297816282162649029611;\\n\\n  /// @dev Adds a bit to the uint256 bitmap at bitmapIndex\\n  /// @dev Value of bit cannot be zero and must represent a single bit\\n  /// @param bitmapIndex The index of the uint256 bitmap\\n  /// @param bit The value of the bit within the uint256 bitmap\\n  function useBit(uint256 bitmapIndex, uint256 bit) internal {\\n    if (!validBit(bit)) {\\n      revert InvalidBit();\\n    }\\n    bytes32 ptr = bitmapPtr(bitmapIndex);\\n    uint256 bitmap = loadUint(ptr);\\n    if (bitmap & bit != 0) {\\n      revert BitUsed();\\n    }\\n    uint256 updatedBitmap = bitmap | bit;\\n    assembly { sstore(ptr, updatedBitmap) }\\n  }\\n\\n  /// @dev Check that a bit is valid\\n  /// @param bit The bit to check\\n  /// @return isValid True if bit is greater than zero and represents a single bit\\n  function validBit(uint256 bit) internal pure returns (bool isValid) {\\n    assembly {\\n      // equivalent to: isValid = (bit > 0 && bit & bit-1) == 0;\\n      isValid := and(\\n        iszero(iszero(bit)), \\n        iszero(and(bit, sub(bit, 1)))\\n      )\\n    } \\n  }\\n\\n  /// @dev Get a bitmap storage pointer\\n  /// @return The bytes32 pointer to the storage location of the uint256 bitmap at bitmapIndex\\n  function bitmapPtr (uint256 bitmapIndex) internal pure returns (bytes32) {\\n    return bytes32(INITIAL_BMP_PTR + bitmapIndex);\\n  }\\n\\n  /// @dev Returns the uint256 value at storage location ptr\\n  /// @param ptr The storage location pointer\\n  /// @return val The uint256 value at storage location ptr\\n  function loadUint(bytes32 ptr) internal view returns (uint256 val) {\\n    assembly { val := sload(ptr) }\\n  }\\n}\\n\",\"keccak256\":\"0xbe67e84b69bb4a006de164048c60656592598b14e22883ce395b4f75f557aa1e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/Oracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nabstract contract Oracle {\\n  uint constant public ONE_HUNDRED_PERCENT = 100;\\n\\n  mapping(address => uint) public testPrices;\\n\\n  function setPriceOf(address _token, uint _price) external {\\n    testPrices[_token] = _price;\\n  }\\n\\n  function _isPriceValid(IERC20 tokenIn, IERC20 tokenOut, uint256 tokenInAmount, uint256 tokenOutAmount) internal returns(bool){\\n    uint totalInUSD;\\n    totalInUSD += (tokenInAmount * testPrices[address(tokenIn)]);\\n    \\n    uint usdReqOut = testPrices[address(tokenOut)] * tokenOutAmount;\\n    require(totalInUSD > 0 && usdReqOut > 0, \\\"Cannot have 0\\\");\\n    return(totalInUSD <= usdReqOut);\\n  }\\n\\n}\",\"keccak256\":\"0x99456d634b4c76c4dcd78fc34c1e40dbe78a258da912971324a0b4bbd227f929\",\"license\":\"MIT\"},\"contracts/Verifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport \\\"./Interfaces/ICallExecutor.sol\\\";\\nimport \\\"./Libraries/Bit.sol\\\";\\nimport {Oracle} from \\\"./Oracle.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Verifier for ERC20 limit swaps\\n/// @notice These functions should be executed by metaPartialSignedDelegateCall() on Brink account proxy contracts\\ncontract StopLimitSwapVerifier is Oracle{\\n  /// @dev Revert when limit swap is expired\\n  error Expired();\\n\\n  /// @dev Revert when swap has not received enough of the output asset to be fulfilled\\n  error NotEnoughReceived(uint256 amountReceived);\\n\\n  event InvalidData();\\n\\n  ICallExecutor internal immutable CALL_EXECUTOR;\\n\\n  constructor(ICallExecutor callExecutor) {\\n    CALL_EXECUTOR = callExecutor;\\n  }\\n\\n  /// @dev Executes an ERC20 to ERC20 limit swap\\n  /// @notice This should be executed by metaDelegateCall() or metaDelegateCall_EIP1271() with the following signed and unsigned params\\n  /// @param bitmapIndex The index of the replay bit's bytes32 slot [signed]\\n  /// @param bit The value of the replay bit [signed]\\n  /// @param tokenIn The input token provided for the swap [signed]\\n  /// @param tokenOut The output token required to be received from the swap [signed]\\n  /// @param tokenInAmount Amount of tokenIn provided [signed]\\n  /// @param tokenOutAmount Amount of tokenOut required to be received [signed]\\n  /// @param expiryBlock The block when the swap expires [signed]\\n  /// @param to Address of the contract that will fulfill the swap [unsigned]\\n  /// @param data Data to execute on the `to` contract to fulfill the swap [unsigned]\\n  function tokenToToken(\\n    uint256 bitmapIndex, uint256 bit, IERC20 tokenIn, IERC20 tokenOut, uint256 tokenInAmount, uint256 tokenOutAmount,\\n    uint256 expiryBlock, address recipient, address to, bytes calldata data\\n  )\\n    external\\n  {\\n    // Oracle Check\\n    require(_isPriceValid(tokenIn, tokenOut, tokenInAmount, tokenOutAmount), \\\"Price too high\\\");\\n\\n    if (expiryBlock <= block.number) {\\n      revert Expired();\\n    }\\n  \\n    Bit.useBit(bitmapIndex, bit);\\n\\n    address owner = proxyOwner();\\n\\n    uint256 tokenOutBalance = tokenOut.balanceOf(owner);\\n\\n    tokenIn.transferFrom(owner, recipient, tokenInAmount);\\n\\n    CALL_EXECUTOR.proxyCall(to, data);\\n\\n    uint256 tokenOutAmountReceived = tokenOut.balanceOf(owner) - tokenOutBalance;\\n\\n    // todo find out what this is all about\\n    if (tokenOutAmountReceived < tokenOutAmount) {\\n      revert NotEnoughReceived(tokenOutAmountReceived);\\n    }\\n  }\\n\\n  /// @dev Returns the owner address for the proxy\\n  /// @return _proxyOwner The owner address for the proxy\\n  function proxyOwner() internal view returns (address _proxyOwner) {\\n    assembly {\\n      // copies to \\\"scratch space\\\" 0 memory pointer\\n      extcodecopy(address(), 0, 0x28, 0x14)\\n      _proxyOwner := shr(0x60, mload(0))\\n    }\\n  }\\n\\n    fallback() external{\\n    emit InvalidData();\\n  }\\n\\n\\n}\",\"keccak256\":\"0xa6eefc3e3a732950da9e8f5c38339516a904a255334d542368fdf7346ac46aed\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405162000e5638038062000e56833981810160405281019061003491906100e3565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505050610110565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061009e82610073565b9050919050565b60006100b082610093565b9050919050565b6100c0816100a5565b81146100cb57600080fd5b50565b6000815190506100dd816100b7565b92915050565b6000602082840312156100f9576100f861006e565b5b6000610107848285016100ce565b91505092915050565b608051610d2a6200012c60003960006102e70152610d2a6000f3fe608060405234801561001057600080fd5b50600436106100505760003560e01c80630f6322c41461007f5780631536cc731461009b578063dd0081c7146100b7578063ec062b75146100d557610051565b5b7f5cb045dbe1e6a83a0b3b08b74d52e9d7458a678ccdbe4247774b0abb20db402f60405160405180910390a1005b61009960048036038101906100949190610726565b610105565b005b6100b560048036038101906100b09190610809565b61014c565b005b6100bf610452565b6040516100cc9190610918565b60405180910390f35b6100ef60048036038101906100ea9190610933565b610457565b6040516100fc9190610918565b60405180910390f35b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b6101588989898961046f565b610197576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018e906109bd565b60405180910390fd5b4385116101d0576040517f203d82d800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6101da8b8b610576565b60006101e461061c565b905060008973ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b815260040161022191906109ec565b602060405180830381865afa15801561023e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102629190610a1c565b90508a73ffffffffffffffffffffffffffffffffffffffff166323b872dd83888c6040518463ffffffff1660e01b81526004016102a193929190610a49565b6020604051808303816000875af11580156102c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e49190610ab8565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632a31f6b48686866040518463ffffffff1660e01b815260040161034293929190610b43565b600060405180830381600087803b15801561035c57600080fd5b505af1158015610370573d6000803e3d6000fd5b505050506000818b73ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b81526004016103b091906109ec565b602060405180830381865afa1580156103cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f19190610a1c565b6103fb9190610ba4565b90508881101561044257806040517f8e3b9edc0000000000000000000000000000000000000000000000000000000081526004016104399190610918565b60405180910390fd5b5050505050505050505050505050565b606481565b60006020528060005260406000206000915090505481565b6000806000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846104bc9190610bd8565b816104c79190610c32565b90506000836000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546105159190610bd8565b90506000821180156105275750600081115b610566576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055d90610cd4565b60405180910390fd5b8082111592505050949350505050565b61057f81610631565b6105b5576040517f8e8721ac00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006105c083610645565b905060006105cd8261067d565b905060008382161461060b576040517f8c2e095100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600083821790508083555050505050565b6000601460286000303c60005160601c905090565b600060018203821615821515169050919050565b6000817f6c0dc1c455ee100500be45eb5af9d4c93f609d5877e81b7c1f2a01280732dbeb6106739190610c32565b60001b9050919050565b600081549050919050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106bd82610692565b9050919050565b6106cd816106b2565b81146106d857600080fd5b50565b6000813590506106ea816106c4565b92915050565b6000819050919050565b610703816106f0565b811461070e57600080fd5b50565b600081359050610720816106fa565b92915050565b6000806040838503121561073d5761073c610688565b5b600061074b858286016106db565b925050602061075c85828601610711565b9150509250929050565b6000610771826106b2565b9050919050565b61078181610766565b811461078c57600080fd5b50565b60008135905061079e81610778565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126107c9576107c86107a4565b5b8235905067ffffffffffffffff8111156107e6576107e56107a9565b5b602083019150836001820283011115610802576108016107ae565b5b9250929050565b60008060008060008060008060008060006101408c8e03121561082f5761082e610688565b5b600061083d8e828f01610711565b9b5050602061084e8e828f01610711565b9a5050604061085f8e828f0161078f565b99505060606108708e828f0161078f565b98505060806108818e828f01610711565b97505060a06108928e828f01610711565b96505060c06108a38e828f01610711565b95505060e06108b48e828f016106db565b9450506101006108c68e828f016106db565b9350506101208c013567ffffffffffffffff8111156108e8576108e761068d565b5b6108f48e828f016107b3565b92509250509295989b509295989b9093969950565b610912816106f0565b82525050565b600060208201905061092d6000830184610909565b92915050565b60006020828403121561094957610948610688565b5b6000610957848285016106db565b91505092915050565b600082825260208201905092915050565b7f507269636520746f6f2068696768000000000000000000000000000000000000600082015250565b60006109a7600e83610960565b91506109b282610971565b602082019050919050565b600060208201905081810360008301526109d68161099a565b9050919050565b6109e6816106b2565b82525050565b6000602082019050610a0160008301846109dd565b92915050565b600081519050610a16816106fa565b92915050565b600060208284031215610a3257610a31610688565b5b6000610a4084828501610a07565b91505092915050565b6000606082019050610a5e60008301866109dd565b610a6b60208301856109dd565b610a786040830184610909565b949350505050565b60008115159050919050565b610a9581610a80565b8114610aa057600080fd5b50565b600081519050610ab281610a8c565b92915050565b600060208284031215610ace57610acd610688565b5b6000610adc84828501610aa3565b91505092915050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000610b228385610ae5565b9350610b2f838584610af6565b610b3883610b05565b840190509392505050565b6000604082019050610b5860008301866109dd565b8181036020830152610b6b818486610b16565b9050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610baf826106f0565b9150610bba836106f0565b925082821015610bcd57610bcc610b75565b5b828203905092915050565b6000610be3826106f0565b9150610bee836106f0565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610c2757610c26610b75565b5b828202905092915050565b6000610c3d826106f0565b9150610c48836106f0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610c7d57610c7c610b75565b5b828201905092915050565b7f43616e6e6f742068617665203000000000000000000000000000000000000000600082015250565b6000610cbe600d83610960565b9150610cc982610c88565b602082019050919050565b60006020820190508181036000830152610ced81610cb1565b905091905056fea2646970667358221220fac2cc3f27ec2ec93f604639d95d8b90d7472f70041d2c866041c9e1d16fa2d264736f6c634300080e0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100505760003560e01c80630f6322c41461007f5780631536cc731461009b578063dd0081c7146100b7578063ec062b75146100d557610051565b5b7f5cb045dbe1e6a83a0b3b08b74d52e9d7458a678ccdbe4247774b0abb20db402f60405160405180910390a1005b61009960048036038101906100949190610726565b610105565b005b6100b560048036038101906100b09190610809565b61014c565b005b6100bf610452565b6040516100cc9190610918565b60405180910390f35b6100ef60048036038101906100ea9190610933565b610457565b6040516100fc9190610918565b60405180910390f35b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b6101588989898961046f565b610197576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018e906109bd565b60405180910390fd5b4385116101d0576040517f203d82d800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6101da8b8b610576565b60006101e461061c565b905060008973ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b815260040161022191906109ec565b602060405180830381865afa15801561023e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102629190610a1c565b90508a73ffffffffffffffffffffffffffffffffffffffff166323b872dd83888c6040518463ffffffff1660e01b81526004016102a193929190610a49565b6020604051808303816000875af11580156102c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e49190610ab8565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632a31f6b48686866040518463ffffffff1660e01b815260040161034293929190610b43565b600060405180830381600087803b15801561035c57600080fd5b505af1158015610370573d6000803e3d6000fd5b505050506000818b73ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b81526004016103b091906109ec565b602060405180830381865afa1580156103cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f19190610a1c565b6103fb9190610ba4565b90508881101561044257806040517f8e3b9edc0000000000000000000000000000000000000000000000000000000081526004016104399190610918565b60405180910390fd5b5050505050505050505050505050565b606481565b60006020528060005260406000206000915090505481565b6000806000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846104bc9190610bd8565b816104c79190610c32565b90506000836000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546105159190610bd8565b90506000821180156105275750600081115b610566576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055d90610cd4565b60405180910390fd5b8082111592505050949350505050565b61057f81610631565b6105b5576040517f8e8721ac00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006105c083610645565b905060006105cd8261067d565b905060008382161461060b576040517f8c2e095100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600083821790508083555050505050565b6000601460286000303c60005160601c905090565b600060018203821615821515169050919050565b6000817f6c0dc1c455ee100500be45eb5af9d4c93f609d5877e81b7c1f2a01280732dbeb6106739190610c32565b60001b9050919050565b600081549050919050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106bd82610692565b9050919050565b6106cd816106b2565b81146106d857600080fd5b50565b6000813590506106ea816106c4565b92915050565b6000819050919050565b610703816106f0565b811461070e57600080fd5b50565b600081359050610720816106fa565b92915050565b6000806040838503121561073d5761073c610688565b5b600061074b858286016106db565b925050602061075c85828601610711565b9150509250929050565b6000610771826106b2565b9050919050565b61078181610766565b811461078c57600080fd5b50565b60008135905061079e81610778565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126107c9576107c86107a4565b5b8235905067ffffffffffffffff8111156107e6576107e56107a9565b5b602083019150836001820283011115610802576108016107ae565b5b9250929050565b60008060008060008060008060008060006101408c8e03121561082f5761082e610688565b5b600061083d8e828f01610711565b9b5050602061084e8e828f01610711565b9a5050604061085f8e828f0161078f565b99505060606108708e828f0161078f565b98505060806108818e828f01610711565b97505060a06108928e828f01610711565b96505060c06108a38e828f01610711565b95505060e06108b48e828f016106db565b9450506101006108c68e828f016106db565b9350506101208c013567ffffffffffffffff8111156108e8576108e761068d565b5b6108f48e828f016107b3565b92509250509295989b509295989b9093969950565b610912816106f0565b82525050565b600060208201905061092d6000830184610909565b92915050565b60006020828403121561094957610948610688565b5b6000610957848285016106db565b91505092915050565b600082825260208201905092915050565b7f507269636520746f6f2068696768000000000000000000000000000000000000600082015250565b60006109a7600e83610960565b91506109b282610971565b602082019050919050565b600060208201905081810360008301526109d68161099a565b9050919050565b6109e6816106b2565b82525050565b6000602082019050610a0160008301846109dd565b92915050565b600081519050610a16816106fa565b92915050565b600060208284031215610a3257610a31610688565b5b6000610a4084828501610a07565b91505092915050565b6000606082019050610a5e60008301866109dd565b610a6b60208301856109dd565b610a786040830184610909565b949350505050565b60008115159050919050565b610a9581610a80565b8114610aa057600080fd5b50565b600081519050610ab281610a8c565b92915050565b600060208284031215610ace57610acd610688565b5b6000610adc84828501610aa3565b91505092915050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000610b228385610ae5565b9350610b2f838584610af6565b610b3883610b05565b840190509392505050565b6000604082019050610b5860008301866109dd565b8181036020830152610b6b818486610b16565b9050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610baf826106f0565b9150610bba836106f0565b925082821015610bcd57610bcc610b75565b5b828203905092915050565b6000610be3826106f0565b9150610bee836106f0565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610c2757610c26610b75565b5b828202905092915050565b6000610c3d826106f0565b9150610c48836106f0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610c7d57610c7c610b75565b5b828201905092915050565b7f43616e6e6f742068617665203000000000000000000000000000000000000000600082015250565b6000610cbe600d83610960565b9150610cc982610c88565b602082019050919050565b60006020820190508181036000830152610ced81610cb1565b905091905056fea2646970667358221220fac2cc3f27ec2ec93f604639d95d8b90d7472f70041d2c866041c9e1d16fa2d264736f6c634300080e0033",
  "devdoc": {
    "errors": {
      "BitUsed()": [
        {
          "details": "Revert when bit provided is used"
        }
      ],
      "Expired()": [
        {
          "details": "Revert when limit swap is expired"
        }
      ],
      "InvalidBit()": [
        {
          "details": "Revert when bit provided is not valid"
        }
      ],
      "NotEnoughReceived(uint256)": [
        {
          "details": "Revert when swap has not received enough of the output asset to be fulfilled"
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "tokenToToken(uint256,uint256,address,address,uint256,uint256,uint256,address,address,bytes)": {
        "details": "Executes an ERC20 to ERC20 limit swap",
        "params": {
          "bit": "The value of the replay bit [signed]",
          "bitmapIndex": "The index of the replay bit's bytes32 slot [signed]",
          "data": "Data to execute on the `to` contract to fulfill the swap [unsigned]",
          "expiryBlock": "The block when the swap expires [signed]",
          "to": "Address of the contract that will fulfill the swap [unsigned]",
          "tokenIn": "The input token provided for the swap [signed]",
          "tokenInAmount": "Amount of tokenIn provided [signed]",
          "tokenOut": "The output token required to be received from the swap [signed]",
          "tokenOutAmount": "Amount of tokenOut required to be received [signed]"
        }
      }
    },
    "title": "Verifier for ERC20 limit swaps",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "tokenToToken(uint256,uint256,address,address,uint256,uint256,uint256,address,address,bytes)": {
        "notice": "This should be executed by metaDelegateCall() or metaDelegateCall_EIP1271() with the following signed and unsigned params"
      }
    },
    "notice": "These functions should be executed by metaPartialSignedDelegateCall() on Brink account proxy contracts",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 194,
        "contract": "contracts/Verifier.sol:StopLimitSwapVerifier",
        "label": "testPrices",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
