{
  "address": "0xf4C063A10F1378a46Bc3F7984c044896D32e1aAa",
  "abi": [
    {
      "anonymous": false,
      "inputs": [],
      "name": "InvalidData",
      "type": "event"
    },
    {
      "stateMutability": "nonpayable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "tokensIn",
          "type": "address[]"
        },
        {
          "internalType": "contract IERC20",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "tokensInAmount",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "tokenOutAmount",
          "type": "uint256"
        }
      ],
      "name": "tokensToToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uni",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6951ee43a19fcf6cd1a131f0c7c994ae3c2798cafeb99f6c7797d4c98437c197",
  "receipt": {
    "to": null,
    "from": "0x7A3876E516d7F221Eb4791410F7434F20f01773A",
    "contractAddress": "0xf4C063A10F1378a46Bc3F7984c044896D32e1aAa",
    "transactionIndex": 32,
    "gasUsed": "860218",
    "logsBloom": "0x
    "blockHash": "0xb86fcfc3c2112e21501853c93ec16cf1767ef32396d52889356a94271d059a9d",
    "transactionHash": "0x6951ee43a19fcf6cd1a131f0c7c994ae3c2798cafeb99f6c7797d4c98437c197",
    "logs": [],
    "blockNumber": 7736125,
    "cumulativeGasUsed": "5765202",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "765bb861775974978187c766fba6dc37",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[],\"name\":\"InvalidData\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokensIn\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokensInAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"tokenOutAmount\",\"type\":\"uint256\"}],\"name\":\"tokensToToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uni\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Implementation.sol\":\"Implementation\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/Implementation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\n\\ncontract Implementation{\\n    IUniswapV2Router02 constant public uni = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n    \\n    event InvalidData();\\n\\n    function tokensToToken(address maker, IERC20[] calldata tokensIn, IERC20 tokenOut, uint256[] calldata tokensInAmount, uint256 tokenOutAmount)external{\\n    require(tokensIn.length == tokensInAmount.length, \\\"Arrays must have the same length\\\");\\n    for(uint i = 0; i < tokensIn.length; i++){\\n        require(tokensIn[i].balanceOf(address(this)) >= tokensInAmount[i], \\\"Tokens not received\\\");\\n\\n        tokensIn[i].approve(address(uni), tokensInAmount[i]);\\n        address[] memory path = new address[](2);\\n        path[0] = address(tokensIn[i]);\\n        path[1] = address(tokenOut);\\n        uni.swapExactTokensForTokens(tokensInAmount[i], tokenOutAmount, path, address(this), block.timestamp + 30);\\n    }\\n\\n    tokenOut.transfer(maker, tokenOutAmount);\\n\\n  }\\n\\n  fallback() external{\\n    revert(\\\"Invalid call to implementation\\\");\\n  }\\n}\",\"keccak256\":\"0x27467469da43214b1c192a19f465aa0b556b977f9a7067e13cdb9025bb016ac4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610ea4806100206000396000f3fe608060405234801561001057600080fd5b506004361061003a5760003560e01c806396fc908514610076578063edc9af95146100925761003b565b5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161006d906105bd565b60405180910390fd5b610090600480360381019061008b919061077e565b6100b0565b005b61009a610548565b6040516100a79190610899565b60405180910390f35b8282905086869050146100f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100ef90610900565b60405180910390fd5b60005b868690508110156104bf5783838281811061011957610118610920565b5b9050602002013587878381811061013357610132610920565b5b9050602002016020810190610148919061094f565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610180919061098b565b602060405180830381865afa15801561019d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c191906109bb565b1015610202576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f990610a34565b60405180910390fd5b86868281811061021557610214610920565b5b905060200201602081019061022a919061094f565b73ffffffffffffffffffffffffffffffffffffffff1663095ea7b3737a250d5630b4cf539739df2c5dacb4c659f2488d86868581811061026d5761026c610920565b5b905060200201356040518363ffffffff1660e01b8152600401610291929190610a63565b6020604051808303816000875af11580156102b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d49190610ac4565b506000600267ffffffffffffffff8111156102f2576102f1610af1565b5b6040519080825280602002602001820160405280156103205781602001602082028036833780820191505090505b50905087878381811061033657610335610920565b5b905060200201602081019061034b919061094f565b8160008151811061035f5761035e610920565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505085816001815181106103ae576103ad610920565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050737a250d5630b4cf539739df2c5dacb4c659f2488d73ffffffffffffffffffffffffffffffffffffffff166338ed173986868581811061042b5761042a610920565b5b90506020020135858430601e426104429190610b4f565b6040518663ffffffff1660e01b8152600401610462959493929190610c63565b6000604051808303816000875af1158015610481573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906104aa9190610ddd565b505080806104b790610e26565b9150506100fb565b508373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb88836040518363ffffffff1660e01b81526004016104fb929190610a63565b6020604051808303816000875af115801561051a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053e9190610ac4565b5050505050505050565b737a250d5630b4cf539739df2c5dacb4c659f2488d81565b600082825260208201905092915050565b7f496e76616c69642063616c6c20746f20696d706c656d656e746174696f6e0000600082015250565b60006105a7601e83610560565b91506105b282610571565b602082019050919050565b600060208201905081810360008301526105d68161059a565b9050919050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061061c826105f1565b9050919050565b61062c81610611565b811461063757600080fd5b50565b60008135905061064981610623565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126106745761067361064f565b5b8235905067ffffffffffffffff81111561069157610690610654565b5b6020830191508360208202830111156106ad576106ac610659565b5b9250929050565b60006106bf82610611565b9050919050565b6106cf816106b4565b81146106da57600080fd5b50565b6000813590506106ec816106c6565b92915050565b60008083601f8401126107085761070761064f565b5b8235905067ffffffffffffffff81111561072557610724610654565b5b60208301915083602082028301111561074157610740610659565b5b9250929050565b6000819050919050565b61075b81610748565b811461076657600080fd5b50565b60008135905061077881610752565b92915050565b600080600080600080600060a0888a03121561079d5761079c6105e7565b5b60006107ab8a828b0161063a565b975050602088013567ffffffffffffffff8111156107cc576107cb6105ec565b5b6107d88a828b0161065e565b965096505060406107eb8a828b016106dd565b945050606088013567ffffffffffffffff81111561080c5761080b6105ec565b5b6108188a828b016106f2565b9350935050608061082b8a828b01610769565b91505092959891949750929550565b6000819050919050565b600061085f61085a610855846105f1565b61083a565b6105f1565b9050919050565b600061087182610844565b9050919050565b600061088382610866565b9050919050565b61089381610878565b82525050565b60006020820190506108ae600083018461088a565b92915050565b7f417272617973206d7573742068617665207468652073616d65206c656e677468600082015250565b60006108ea602083610560565b91506108f5826108b4565b602082019050919050565b60006020820190508181036000830152610919816108dd565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215610965576109646105e7565b5b6000610973848285016106dd565b91505092915050565b61098581610611565b82525050565b60006020820190506109a0600083018461097c565b92915050565b6000815190506109b581610752565b92915050565b6000602082840312156109d1576109d06105e7565b5b60006109df848285016109a6565b91505092915050565b7f546f6b656e73206e6f7420726563656976656400000000000000000000000000600082015250565b6000610a1e601383610560565b9150610a29826109e8565b602082019050919050565b60006020820190508181036000830152610a4d81610a11565b9050919050565b610a5d81610748565b82525050565b6000604082019050610a78600083018561097c565b610a856020830184610a54565b9392505050565b60008115159050919050565b610aa181610a8c565b8114610aac57600080fd5b50565b600081519050610abe81610a98565b92915050565b600060208284031215610ada57610ad96105e7565b5b6000610ae884828501610aaf565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610b5a82610748565b9150610b6583610748565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610b9a57610b99610b20565b5b828201905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610bda81610611565b82525050565b6000610bec8383610bd1565b60208301905092915050565b6000602082019050919050565b6000610c1082610ba5565b610c1a8185610bb0565b9350610c2583610bc1565b8060005b83811015610c56578151610c3d8882610be0565b9750610c4883610bf8565b925050600181019050610c29565b5085935050505092915050565b600060a082019050610c786000830188610a54565b610c856020830187610a54565b8181036040830152610c978186610c05565b9050610ca6606083018561097c565b610cb36080830184610a54565b9695505050505050565b6000601f19601f8301169050919050565b610cd782610cbd565b810181811067ffffffffffffffff82111715610cf657610cf5610af1565b5b80604052505050565b6000610d096105dd565b9050610d158282610cce565b919050565b600067ffffffffffffffff821115610d3557610d34610af1565b5b602082029050602081019050919050565b6000610d59610d5484610d1a565b610cff565b90508083825260208201905060208402830185811115610d7c57610d7b610659565b5b835b81811015610da55780610d9188826109a6565b845260208401935050602081019050610d7e565b5050509392505050565b600082601f830112610dc457610dc361064f565b5b8151610dd4848260208601610d46565b91505092915050565b600060208284031215610df357610df26105e7565b5b600082015167ffffffffffffffff811115610e1157610e106105ec565b5b610e1d84828501610daf565b91505092915050565b6000610e3182610748565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610e6357610e62610b20565b5b60018201905091905056fea26469706673582212208d50786e1311a2f3a0ad195372bc46f80861263f8e384d25f243434dc7594ce464736f6c634300080e0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061003a5760003560e01c806396fc908514610076578063edc9af95146100925761003b565b5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161006d906105bd565b60405180910390fd5b610090600480360381019061008b919061077e565b6100b0565b005b61009a610548565b6040516100a79190610899565b60405180910390f35b8282905086869050146100f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100ef90610900565b60405180910390fd5b60005b868690508110156104bf5783838281811061011957610118610920565b5b9050602002013587878381811061013357610132610920565b5b9050602002016020810190610148919061094f565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610180919061098b565b602060405180830381865afa15801561019d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c191906109bb565b1015610202576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f990610a34565b60405180910390fd5b86868281811061021557610214610920565b5b905060200201602081019061022a919061094f565b73ffffffffffffffffffffffffffffffffffffffff1663095ea7b3737a250d5630b4cf539739df2c5dacb4c659f2488d86868581811061026d5761026c610920565b5b905060200201356040518363ffffffff1660e01b8152600401610291929190610a63565b6020604051808303816000875af11580156102b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d49190610ac4565b506000600267ffffffffffffffff8111156102f2576102f1610af1565b5b6040519080825280602002602001820160405280156103205781602001602082028036833780820191505090505b50905087878381811061033657610335610920565b5b905060200201602081019061034b919061094f565b8160008151811061035f5761035e610920565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505085816001815181106103ae576103ad610920565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050737a250d5630b4cf539739df2c5dacb4c659f2488d73ffffffffffffffffffffffffffffffffffffffff166338ed173986868581811061042b5761042a610920565b5b90506020020135858430601e426104429190610b4f565b6040518663ffffffff1660e01b8152600401610462959493929190610c63565b6000604051808303816000875af1158015610481573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906104aa9190610ddd565b505080806104b790610e26565b9150506100fb565b508373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb88836040518363ffffffff1660e01b81526004016104fb929190610a63565b6020604051808303816000875af115801561051a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053e9190610ac4565b5050505050505050565b737a250d5630b4cf539739df2c5dacb4c659f2488d81565b600082825260208201905092915050565b7f496e76616c69642063616c6c20746f20696d706c656d656e746174696f6e0000600082015250565b60006105a7601e83610560565b91506105b282610571565b602082019050919050565b600060208201905081810360008301526105d68161059a565b9050919050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061061c826105f1565b9050919050565b61062c81610611565b811461063757600080fd5b50565b60008135905061064981610623565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126106745761067361064f565b5b8235905067ffffffffffffffff81111561069157610690610654565b5b6020830191508360208202830111156106ad576106ac610659565b5b9250929050565b60006106bf82610611565b9050919050565b6106cf816106b4565b81146106da57600080fd5b50565b6000813590506106ec816106c6565b92915050565b60008083601f8401126107085761070761064f565b5b8235905067ffffffffffffffff81111561072557610724610654565b5b60208301915083602082028301111561074157610740610659565b5b9250929050565b6000819050919050565b61075b81610748565b811461076657600080fd5b50565b60008135905061077881610752565b92915050565b600080600080600080600060a0888a03121561079d5761079c6105e7565b5b60006107ab8a828b0161063a565b975050602088013567ffffffffffffffff8111156107cc576107cb6105ec565b5b6107d88a828b0161065e565b965096505060406107eb8a828b016106dd565b945050606088013567ffffffffffffffff81111561080c5761080b6105ec565b5b6108188a828b016106f2565b9350935050608061082b8a828b01610769565b91505092959891949750929550565b6000819050919050565b600061085f61085a610855846105f1565b61083a565b6105f1565b9050919050565b600061087182610844565b9050919050565b600061088382610866565b9050919050565b61089381610878565b82525050565b60006020820190506108ae600083018461088a565b92915050565b7f417272617973206d7573742068617665207468652073616d65206c656e677468600082015250565b60006108ea602083610560565b91506108f5826108b4565b602082019050919050565b60006020820190508181036000830152610919816108dd565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215610965576109646105e7565b5b6000610973848285016106dd565b91505092915050565b61098581610611565b82525050565b60006020820190506109a0600083018461097c565b92915050565b6000815190506109b581610752565b92915050565b6000602082840312156109d1576109d06105e7565b5b60006109df848285016109a6565b91505092915050565b7f546f6b656e73206e6f7420726563656976656400000000000000000000000000600082015250565b6000610a1e601383610560565b9150610a29826109e8565b602082019050919050565b60006020820190508181036000830152610a4d81610a11565b9050919050565b610a5d81610748565b82525050565b6000604082019050610a78600083018561097c565b610a856020830184610a54565b9392505050565b60008115159050919050565b610aa181610a8c565b8114610aac57600080fd5b50565b600081519050610abe81610a98565b92915050565b600060208284031215610ada57610ad96105e7565b5b6000610ae884828501610aaf565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610b5a82610748565b9150610b6583610748565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610b9a57610b99610b20565b5b828201905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610bda81610611565b82525050565b6000610bec8383610bd1565b60208301905092915050565b6000602082019050919050565b6000610c1082610ba5565b610c1a8185610bb0565b9350610c2583610bc1565b8060005b83811015610c56578151610c3d8882610be0565b9750610c4883610bf8565b925050600181019050610c29565b5085935050505092915050565b600060a082019050610c786000830188610a54565b610c856020830187610a54565b8181036040830152610c978186610c05565b9050610ca6606083018561097c565b610cb36080830184610a54565b9695505050505050565b6000601f19601f8301169050919050565b610cd782610cbd565b810181811067ffffffffffffffff82111715610cf657610cf5610af1565b5b80604052505050565b6000610d096105dd565b9050610d158282610cce565b919050565b600067ffffffffffffffff821115610d3557610d34610af1565b5b602082029050602081019050919050565b6000610d59610d5484610d1a565b610cff565b90508083825260208201905060208402830185811115610d7c57610d7b610659565b5b835b81811015610da55780610d9188826109a6565b845260208401935050602081019050610d7e565b5050509392505050565b600082601f830112610dc457610dc361064f565b5b8151610dd4848260208601610d46565b91505092915050565b600060208284031215610df357610df26105e7565b5b600082015167ffffffffffffffff811115610e1157610e106105ec565b5b610e1d84828501610daf565b91505092915050565b6000610e3182610748565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610e6357610e62610b20565b5b60018201905091905056fea26469706673582212208d50786e1311a2f3a0ad195372bc46f80861263f8e384d25f243434dc7594ce464736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}